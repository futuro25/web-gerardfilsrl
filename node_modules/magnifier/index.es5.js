'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global document */


var _globalOffset = require('global-offset');

var _globalOffset2 = _interopRequireDefault(_globalOffset);

var _insertAfter = require('insert-after');

var _insertAfter2 = _interopRequireDefault(_insertAfter);

var _isPointerInside = require('is-pointer-inside');

var _isPointerInside2 = _interopRequireDefault(_isPointerInside);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Magnifier = function () {
  function Magnifier(el) {
    var _this = this;

    _classCallCheck(this, Magnifier);

    this.props = {
      height: 150,
      width: 150,
      backgroundColor: '#fff',
      borderColor: '#eee',
      borderRadius: 75,
      borderWidth: 2
    };

    this.el = typeof el === 'string' ? document.querySelector(el) : el;
    this.lens = document.createElement('div');
    this.lens.className = 'magnifier';
    this.lens.style.position = 'absolute';
    this.lens.style.backgroundRepeat = 'no-repeat';
    this.lens.style.borderStyle = 'solid';
    this.lens.style.overflow = 'hidden';
    this.lens.style.visibility = 'hidden';
    this.lens.style.boxShadow = '0 1px 5px rgba(0, 0, 0, .25)';
    this.handleLoad = this.handleLoad.bind(this);
    this.handleTouchMove = this.handleTouchMove.bind(this);
    this.handleTouchEnd = this.handleTouchEnd.bind(this);
    Object.keys(this.props).forEach(function (prop) {
      return _this.setStyle(prop, _this.props[prop]);
    });
    (0, _insertAfter2.default)(this.lens, this.el);
    this.show();
    this.calcImageSize();
    this.bind();
  }

  _createClass(Magnifier, [{
    key: 'calcImageSize',
    value: function calcImageSize() {
      var orig = document.createElement('img');
      orig.style.position = 'absolute';
      orig.style.width = 'auto';
      orig.style.visibility = 'hidden';
      orig.src = this.el.src;
      orig.onload = this.handleLoad;
      this.lens.appendChild(orig);
    }
  }, {
    key: 'bind',
    value: function bind() {
      this.el.addEventListener('mousemove', this.handleTouchMove, false);
      this.el.addEventListener('mouseleave', this.handleTouchEnd, false);
      this.el.addEventListener('touchstart', this.handleTouchMove, false);
      this.el.addEventListener('touchmove', this.handleTouchMove, false);
      this.el.addEventListener('touchend', this.handleTouchEnd, false);
      this.lens.addEventListener('mousemove', this.handleTouchMove, false);
      this.lens.addEventListener('mouseleave', this.handleTouchEnd, false);
      this.lens.addEventListener('touchmove', this.handleTouchMove, false);
      this.lens.addEventListener('touchend', this.handleTouchEnd, false);
      return this;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      this.el.removeEventListener('mousemove', this.handleTouchMove, false);
      this.el.removeEventListener('mouseleave', this.handleTouchEnd, false);
      this.el.removeEventListener('touchstart', this.handleTouchMove, false);
      this.el.removeEventListener('touchmove', this.handleTouchMove, false);
      this.el.removeEventListener('touchend', this.handleTouchEnd, false);
      this.lens.removeEventListener('mousemove', this.handleTouchMove, false);
      this.lens.removeEventListener('mouseleave', this.handleTouchEnd, false);
      this.lens.removeEventListener('touchmove', this.handleTouchMove, false);
      this.lens.removeEventListener('touchend', this.handleTouchEnd, false);
      return this;
    }
  }, {
    key: 'handleLoad',
    value: function handleLoad() {
      var orig = this.lens.getElementsByTagName('img')[0];
      this.imageWidth = orig.offsetWidth;
      this.imageHeight = orig.offsetHeight;
      this.hide();
      this.lens.style.visibility = 'visible';
      this.lens.style.backgroundImage = 'url(' + this.el.src + ')';
      this.lens.removeChild(orig);
    }
  }, {
    key: 'handleTouchMove',
    value: function handleTouchMove(event) {
      event.preventDefault();
      var touch = event.type.indexOf('touch') === 0 ? event.changedTouches[0] : event;

      if ((0, _isPointerInside2.default)(this.el, touch)) {
        this.show();
        var pageX = touch.pageX,
            pageY = touch.pageY;

        var _offset = (0, _globalOffset2.default)(this.el),
            left = _offset.left,
            top = _offset.top;

        var _el = this.el,
            offsetLeft = _el.offsetLeft,
            offsetTop = _el.offsetTop,
            offsetWidth = _el.offsetWidth,
            offsetHeight = _el.offsetHeight;
        var _props = this.props,
            width = _props.width,
            height = _props.height,
            borderWidth = _props.borderWidth;

        var ratioX = this.imageWidth / offsetWidth;
        var ratioY = this.imageHeight / offsetHeight;
        var imageX = (left - pageX) * ratioX + (width / 2 - borderWidth);
        var imageY = (top - pageY) * ratioY + (height / 2 - borderWidth);
        var x = pageX - width / 2 - (left !== offsetLeft ? left - offsetLeft : 0);
        var y = pageY - height / 2 - (top !== offsetTop ? top - offsetTop : 0);
        this.lens.style.left = x + 'px';
        this.lens.style.top = y + 'px';
        this.lens.style.backgroundPosition = imageX + 'px ' + imageY + 'px';
      } else {
        this.hide();
      }
    }
  }, {
    key: 'handleTouchEnd',
    value: function handleTouchEnd() {
      this.hide();
    }
  }, {
    key: 'height',
    value: function height(n) {
      return this.setProp('height', n);
    }
  }, {
    key: 'width',
    value: function width(n) {
      return this.setProp('width', n);
    }
  }, {
    key: 'backgroundColor',
    value: function backgroundColor(color) {
      return this.setProp('backgroundColor', color);
    }
  }, {
    key: 'borderColor',
    value: function borderColor(color) {
      return this.setProp('borderColor', color);
    }
  }, {
    key: 'borderRadius',
    value: function borderRadius(n) {
      return this.setProp('borderRadius', n);
    }
  }, {
    key: 'borderWidth',
    value: function borderWidth(n) {
      return this.setProp('borderWidth', n);
    }
  }, {
    key: 'setProp',
    value: function setProp(prop, value) {
      this.props[prop] = value;
      this.setStyle(prop, value);
      return this;
    }
  }, {
    key: 'setStyle',
    value: function setStyle(prop, value) {
      this.lens.style[prop] = typeof value === 'number' ? value + 'px' : value;
    }
  }, {
    key: 'className',
    value: function className(name) {
      this.lens.className = name;
      return this;
    }
  }, {
    key: 'show',
    value: function show() {
      this.lens.style.display = 'block';
      return this;
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.lens.style.display = 'none';
      return this;
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.unbind();
      this.lens.remove();
    }
  }]);

  return Magnifier;
}();

exports.default = Magnifier;
module.exports = exports['default'];
